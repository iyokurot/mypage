{"version":3,"sources":["Images/charabye.png","logo.svg","pageComponent/Top.js","pageComponent/Profile.js","pageComponent/Product.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Top","className","src","logo","alt","href","target","rel","to","Profile","ProfileImage","class","data-size","data-show-count","Product","ProjComponent","props","Image","id","map","tag","proj","data","useStyles","makeStyles","list","width","fullList","withRouter","classes","React","useState","top","left","bottom","right","state","setState","toggleDrawer","anchor","open","event","type","key","clsx","role","onClick","onKeyDown","List","text","index","ListItem","button","e","tab","history","push","ListItemIcon","ListItemText","primary","Divider","Fragment","Button","style","fontSize","Drawer","onClose","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38b55545.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/charabye.e1b1c93a.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport logo from '../logo.svg'\r\nimport '../App.css'\r\n\r\nexport default function Top() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>MYPage Sample Test</p>\r\n\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Reactらーん\r\n        </a>\r\n        <Link to=\"/Profile\">Profile</Link>\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport ProfileImage from '../Images/charabye.png'\r\n\r\nexport default function Profile() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>It's Me</h1>\r\n      <img src={ProfileImage} />\r\n      <a\r\n        href=\"https://twitter.com/yuki_pkfs318?ref_src=twsrc%5Etfw\"\r\n        class=\"twitter-follow-button\"\r\n        data-size=\"large\"\r\n        data-show-count=\"false\"\r\n      >\r\n        Follow @itoyu\r\n      </a>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Image from '../Images/charabye.png'\r\nimport '../css/ProjComponent.css'\r\nimport '../css/Product.css'\r\n\r\nexport default function Product() {\r\n  const taglist = ['GAME', 'WEB', 'OTHERS']\r\n  const projectList = ['one', 'two', 'three', 'four']\r\n  const ProjComponent = (props) => {\r\n    return (\r\n      <div className=\"pjc_flame\">\r\n        <div className=\"pjc_img_flame\">\r\n          <span className=\"pjc_tape\"></span>\r\n          <img src={Image} className=\"pjc_img\" alt=\"Project Image\" />\r\n          <p className=\"pjc_button\">View more</p>\r\n          <p className=\"pjc_title\">タイトル</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Product</h1>\r\n      <div id=\"tag_area\">\r\n        <button className=\"tag_button\" id=\"tag_select\">\r\n          #ALL\r\n        </button>\r\n        {taglist.map((tag) => (\r\n          <span>\r\n            <button className=\"tag_button\">#{tag}</button>\r\n          </span>\r\n        ))}\r\n      </div>\r\n      <div id=\"projectlist\">\r\n        {projectList.map((proj) => (\r\n          <ProjComponent data={proj} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport './css/Header.css'\r\nimport Image from './Images/charabye.png'\r\n\r\nimport clsx from 'clsx'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport Button from '@material-ui/core/Button'\r\nimport List from '@material-ui/core/List'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox'\r\nimport MailIcon from '@material-ui/icons/Mail'\r\nimport DehazeIcon from '@material-ui/icons/Dehaze'\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n})\r\n\r\nfunction Header(props) {\r\n  const classes = useStyles()\r\n  const [state, setState] = React.useState({\r\n    top: false,\r\n    left: false,\r\n    bottom: false,\r\n    right: false,\r\n  })\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    if (\r\n      event.type === 'keydown' &&\r\n      (event.key === 'Tab' || event.key === 'Shift')\r\n    ) {\r\n      return\r\n    }\r\n\r\n    setState({ ...state, [anchor]: open })\r\n  }\r\n  const ChangePage = (tab) => {\r\n    if ('Top' === tab) {\r\n      props.history.push('/')\r\n    } else {\r\n      props.history.push('/' + tab)\r\n    }\r\n  }\r\n\r\n  const list = (anchor) => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n      })}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(anchor, false)}\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n    >\r\n      <List>\r\n        {['Top', 'Profile', 'Product'].map((text, index) => (\r\n          <ListItem button key={text} onClick={(e) => ChangePage(text)}>\r\n            <ListItemIcon>\r\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n            </ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {['sonota'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>\r\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n            </ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <header className=\"header\">\r\n        <div>\r\n          {['left'].map((anchor) => (\r\n            <React.Fragment key={anchor}>\r\n              <Button\r\n                onClick={toggleDrawer(anchor, true)}\r\n                style={{ width: 100 }}\r\n              >\r\n                <DehazeIcon style={{ fontSize: 50 }} />\r\n              </Button>\r\n              <Drawer\r\n                anchor={anchor}\r\n                open={state[anchor]}\r\n                onClose={toggleDrawer(anchor, false)}\r\n              >\r\n                {list(anchor)}\r\n              </Drawer>\r\n            </React.Fragment>\r\n          ))}\r\n        </div>\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(Header)\r\n","import React from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport Top from './pageComponent/Top'\nimport Profile from './pageComponent/Profile'\nimport Product from './pageComponent/Product'\nimport Header from './Header'\n\nconst App = () => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <div>\n      <Header />\n      <Route exact path=\"/\" component={Top} />\n      <Route path=\"/Profile\" component={Profile} />\n      <Route path=\"/Product\" component={Product} />\n    </div>\n  </BrowserRouter>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}